{
	"secret.in_screenshot": {
		"prefix": "secret.in_screenshot",
		"body": "secret.in_screenshot()",
		"description": "If a screenshot or screen capture is currently being taken. It returns true if a screenshot is being captured, otherwise false."
	},
	"secret.start_prediction": {
		"prefix": "secret.start_prediction",
		"body": "secret.start_prediction(${1:cmd})",
		"description": "Initiates engine prediction. It is used in the CreateMove hook, to enhance the precision of actions such as aimbot targeting."
	},
	"secret.end_prediction": {
		"prefix": "secret.end_prediction",
		"body": "secret.end_prediction()",
		"description": "Terminates engine prediction. It should be called after invoking secret.start_prediction to finalize the prediction process."
	},
	"secret.net_setcvar": {
		"prefix": "secret.net_setcvar",
		"body": "secret.net_setcvar(\"${1:cvar}\", \"${2:value}\")",
		"description": "Call this with the name of the cvar (as a string) and the desired value (also as a string) to set the network variable to the specified value."
	},
	"secret.net_disconnect": {
		"prefix": "secret.net_disconnect",
		"body": "secret.net_disconnect(\"${1:reason}\")",
		"description": "Allows you to disconnect from a server with a custom disconnect reason."
	},
	"secret.get_freecam_data": {
		"prefix": "secret.get_freecam_data",
		"body": "secret.get_freecam_data()",
		"description": "Retrieves the position and angles of the freecam, if it is currently active."
	},
	"secret.notify": {
		"prefix": "secret.notify",
		"body": "secret.notify(\"${1:text}\", ${2|0,1,2|})",
		"description": "Creates a new notification at the top left corner of the screen with the specified text and notif type."
	},
	"secret.log": {
		"prefix": "secret.log",
		"body": "secret.log(\"${1:text}\", ${2|1,2,3,4|}, ${3|true,false|})",
		"description": "Logs a message onto a custom console with the specified text and log type and date."
	},
	"secret.get_username": {
		"prefix": "secret.get_username",
		"body": "secret.get_username()",
		"description": "Retrieves the current username in the cheat."
	},
	"secret.lua_to_c_function": {
		"prefix": "secret.lua_to_c_function",
		"body": "secret.lua_to_c_function(${1:func})",
		"description": "Converts a Lua function into a C-style Lua function."
	},
	"secret.config_set": {
		"prefix": "secret.config_set",
		"body": "secret.config_set(\"${1:key}\", ${2:value})",
		"description": "Sets a configuration value identified by the specified key to the desired value."
	},
	"secret.config_get": {
		"prefix": "secret.config_get",
		"body": "secret.config_get(\"${1:key}\")",
		"description": "Retrieves the current value of a configuration parameter identified by the specified key."
	},
	"secret.create_checkbox": {
		"prefix": "secret.create_checkbox",
		"body": "secret.create_checkbox(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\")",
		"description": "Creates a checkbox UI element within the specified tab and groupbox of the menu."
	},
	"secret.create_button": {
		"prefix": "secret.create_button",
		"body": "secret.create_button(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", ${4:callback})",
		"description": "Creates a button UI element within the specified tab and groupbox of the menu. When the button is clicked, the specified callback function is invoked."
	},
	"secret.create_slider": {
		"prefix": "secret.create_slider",
		"body": "secret.create_slider(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", ${4:min}, ${5:max}, \"${6:config_name}\")",
		"description": "Creates a slider UI element within the specified tab and groupbox of the menu."
	},
	"secret.add_command": {
		"prefix": "secret.add_command",
		"body": "secret.add_command(\"${1:name}\", \"${2:description}\", function(${3:args}) \n\nend)",
		"description": "Creates a custom console command with the specified name and description."
	},
	"secret.remove_command": {
		"prefix": "secret.remove_command",
		"body": "secret.remove_command(\"${1:name}\")",
		"description": "Removes an existing custom console command with the specified name"
	},
	"secret.menu_open": {
		"prefix": "secret.menu_open",
		"body": "secret.menu_open()",
		"description": "Whether the menu is currently open and returns a boolean value indicating its status."
	},
	"secret.event_listen": {
		"prefix": "secret.event_listen",
		"body": "secret.event_listen(\"${1|view_render_post,think,createmove,paint_traverse|}\", \"${2:handler_name}\", function(${3:args}) \n\nend)",
		"description": "Adds an event handler for the specified event and handler name."
	},
	"secret.event_remove": {
		"prefix": "secret.event_remove",
		"body": "secret.event_remove(\"${1:event}\", \"${2:handler_name}\")",
		"description": "Removes an event handler associated with the specified event and handler name."
	},

	"secret.create_hotkey": {
		"prefix": "secret.create_hotkey",
		"body": "secret.create_hotkey(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\", \"${5:hotkey_display}\")",
		"description": "Creates a hotkey UI element within the specified tab and groupbox of the menu."
	},

	"secret.create_colorpicker": {
		"prefix": "secret.create_colorpicker",
		"body": "secret.create_colorpicker(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\")",
		"description": "Creates a colorpicker UI element within the specified tab and groupbox of the menu."
	},
	
	"secret.mouse_event": {
		"prefix": "secret.mouse_event",
		"body": "secret.mouse_event(${1:dwFlags}, ${2:dx}, ${3:dy}, ${4:dwData})",
		"description": "Simulates a mouse event by specifying various parameters such as flags, delta x, delta y, and data."
	},
	"secret.keybd_event": {
		"prefix": "secret.keybd_event",
		"body": "secret.keybd_event(${1:bVk}, ${2:bScan}, ${3:dwFlags}, ${4:dwExtraInfo})",
		"description": "Synthesizes a keystroke. It generates a keystroke down message, a keystroke up message, or a system keystroke."
	},
	"secret.create_inputbox": {
		"prefix": "secret.create_inputbox",
		"body": "secret.create_inputbox(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\")",
		"description": "Creates an input box UI element within the specified tab and groupbox of the menu."
	},
	"secret.console_open": {
		"prefix": "secret.console_open",
		"body": "secret.console_open()",
		"description": "Checks whether the console is currently open and returns a boolean value indicating its status."
	},
	"secret.readfile": {
		"prefix": "secret.readfile",
		"body": "secret.readfile(\"${1:path}\")",
		"description": "Reads the file at the given path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.writefile": {
		"prefix": "secret.writefile",
		"body": "secret.writefile(\"${1:path}\", ${2:contents})",
		"description": "Writes the provided content to the file at the given path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.appendfile": {
		"prefix": "secret.appendfile",
		"body": "secret.appendfile(\"${1:path}\", ${2:contents})",
		"description": "Appends the provided content to the file at the given path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.listfiles": {
		"prefix": "secret.listfiles",
		"body": "secret.listfiles(\"${1:folder}\")",
		"description": "Returns a table of all files within a folder. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.isfile": {
		"prefix": "secret.isfile",
		"body": "secret.isfile(\"${1:path}\")",
		"description": "Returns if the path provided is a file. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.isfolder": {
		"prefix": "secret.isfolder",
		"body": "secret.isfolder(\"${1:path}\")",
		"description": "Returns if the path provided is a folder. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.makefolder": {
		"prefix": "secret.makefolder",
		"body": "secret.makefolder(\"${1:path}\")",
		"description": "Creates a folder at the specified path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.deletefolder": {
		"prefix": "secret.deletefolder",
		"body": "secret.deletefolder(\"${1:path}\")",
		"description": "Deletes a folder at the specified path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.deletefile": {
		"prefix": "secret.deletefile",
		"body": "secret.deletefile(\"${1:path}\")",
		"description": "Deletes a file at the specified path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.create_groupbox": {
		"prefix": "secret.create_groupbox",
		"body": "secret.create_groupbox(\"${1:tab}\", \"${2|left,right|}\", \"${3:name}\", ${4:height})",
		"description": "Creates a groupbox within the specified tab of the menu."
	},
	"secret.add_friend": {
		"prefix": "secret.add_friend",
		"body": "secret.add_friend(${1:steamid64})",
		"description": "Adds a specified SteamID64 (string) to the friend list."
	},
	"secret.remove_friend": {
		"prefix": "secret.remove_friend",
		"body": "secret.remove_friend(${1:steamid64})",
		"description": "Removes a specified SteamID64 (string) from the friend list."
	},
	"secret.is_friend": {
		"prefix": "secret.is_friend",
		"body": "secret.is_friend(${1:steamid64})",
		"description": "Checks if the specified SteamID64 (string) is in the friend list and returns 'true' if the player is a friend, otherwise 'false'."
	},
	"secret.create_dropdown": {
		"prefix": "secret.create_dropdown",
		"body": "secret.create_dropdown(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\", {\"${5:Item1}\", \"${6:Item2}\", \"${7:youcancreatemore}\"})",
		"description": "Creates a dropdown UI element within the specified tab and groupbox of the menu."
	},
	"secret.execute_command": {
		"prefix": "secret.execute_command",
		"body": "secret.execute_command(\"${1:name}\", ${2:args})",
		"description": "Executes a command with the specified name and optional arguments."
	},
	"secret.get_command_list": {
		"prefix": "secret.get_command_list",
		"body": "secret.get_command_list()",
		"description": "Retrieves a list of available commands."
	},
	"secret.set_steam_name": {
		"prefix": "secret.set_steam_name",
		"body": "secret.set_steam_name(\"${1:name}\")",
		"description": "Allows you to set your steam name to a specified name."
	},
	"secret.add_to_esp": {
		"prefix": "secret.add_to_esp",
		"body": "secret.add_to_esp(${1:index}, \"${2:text}\", {${3:255, 255, 255, 255}}, ${4|1,2,3|})",
//		"body": "local DRAW_TOP = 0\nlocal DRAW_BOTTOM = 1\nlocal DRAW_RIGHT = 2\nlocal DRAW_LEFT = 3\nsecret.add_to_esp(${1:index}, \"${2:text}\", {${3:255, 255, 255, 255}}, ${4|DRAW_TOP, DRAW_BOTTOM,DRAW_RIGHT,DRAW_LEFT|})",
		"description": "Add an ESP element for a specific player in the game. It allows you to display additional information about the player such as armor, etc."
	},
	"secret.get_original": {
		"prefix": "secret.get_original",
		"body": "secret.get_original(\"${1:table}\", \"${2:metatable}\")",
		"description": "Returns the original Gmod CFunction, ensuring that detoured functions are not called thus not triggering anticheats."
	},
	"secret.clear_elements": {
		"prefix": "secret.clear_elements",
		"body": "secret.clear_elements()",
		"description": "Clears all the current elements made with lua, such as secret.create_checkbox, etc."
	},
	"secret.add_to_ent_esp": {
		"prefix": "secret.add_to_ent_esp",
		"body": "secret.add_to_ent_esp(${1:index}, \"${2:text}\", {${3:255, 255, 255, 255}}, ${4|1,2,3|})",
//		"body": "local DRAW_TOP = 0\nlocal DRAW_BOTTOM = 1\nlocal DRAW_RIGHT = 2\nlocal DRAW_LEFT = 3\nsecret.add_to_esp(${1:index}, \"${2:text}\", {${3:255, 255, 255, 255}}, ${4|DRAW_TOP, DRAW_BOTTOM,DRAW_RIGHT,DRAW_LEFT|})",
		"description": "Add an ESP element for a specific player in the game. It allows you to display additional information about the entity. Note: this only works on scripted entities."
	},
	"secret.create_playerlist_button": {
		"prefix": "secret.create_playerlist_button",
		"body": "secret.create_playerlist_button(\"${1:name}\", ${2:entity index}, ${3:callback})",
		"description": "Not Documented may be removed, Creates a button UI element within the playerlist tab. When the button is clicked, the specified callback function is invoked."
	},
	"secret.get_aimbot_target": {
		"prefix": "secret.get_aimbot_target",
		"body": "secret.get_aimbot_target()",
		"description": "Returns the current aimbot target, if the target is not valid, it will return nil. Note: this specific lua function can be detected."
	},
	"secret.in_safe_render": {
		"prefix": "secret.in_safe_render",
		"body": "secret.in_safe_render()",
		"description": "Returns true / false if the current hook is in a 'safe' render state, being hidden from screengrabs and recordings. Note: this requires 'obs bypass' to be enabled for it to work."
	},
	"secret.create_playerlist_text": {
		"prefix": "secret.create_playerlist_text",
		"body": "secret.create_playerlist_text(\"${1:text}\", ${2:entity index})",
		"description": "Not documented. Creates a text element within the player list tab at a specific entity index."
	},
	"secret.runstring": {
		"prefix": "secret.runstring",
		"body": "secret.runstring(\"${1:code}\", ${2:menu_state optional})",
		"description": "Same as the gmod's runstring, but allows access to our API and protection."
	},
	"secret.net_block": {
		"prefix": "secret.net_block",
		"body": "secret.net_block(\"${1:string}\", ${2:bool})",
		"description": "Block a net message from being sent."
	},
	"secret.net_unblock": {
		"prefix": "secret.net_unblock",
		"body": "secret.net_unblock(\"${1:string}\", ${2:bool})",
		"description": "Unblock a blocked net message."
	},
	"secret.add_priority": {
		"prefix": "secret.add_priority",
		"body": "secret.add_priority(${1:steamid64})",
		"description": "Adds a specified SteamID64 (string) to the priority list."
	},
	"secret.remove_priority": {
		"prefix": "secret.remove_priority",
		"body": "secret.remove_priority(${1:steamid64})",
		"description": "Removes a specified SteamID64 (string) from the priority list."
	},
	"secret.is_priority": {
		"prefix": "secret.is_priority",
		"body": "secret.is_priority(${1:steamid64})",
		"description": "Checks if the specified SteamID64 (string) is in the priority list and returns 'true' if the player is a priority, otherwise 'false'."
	},
}
